import telebot
from telebot import types
import logging

BOT_API = '7262313311:AAHa0BEw81CPtmQvUdljNfE4EI67oQf0BpA'


bot = telebot.TeleBot(BOT_API)
from telebot import types
telebot.logger.setLevel(logging.INFO)


@bot.message_handler(commands=['start'])
def start(message):
    # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–µ—ë –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    bot1 = types.InlineKeyboardButton("‚ú®–°–±–æ—Ä–∫–∏", callback_data="sborki")
    bot2 = types.InlineKeyboardButton("‚ò†Ô∏è–ë–µ–∑–¥–Ω–∞", callback_data="bezdna")
    markup.add(bot1, bot2,)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é –í–∞—Å, –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫/—Ü–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–æ—á–∫—É:', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == "sborki":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        markup2 = types.InlineKeyboardMarkup()
        btn4 = types.InlineKeyboardButton('–ö—Ä–∏–æ', callback_data='krio')
        btn5 = types.InlineKeyboardButton('–ü–∏—Ä–æ', callback_data='piro')
        btn6 = types.InlineKeyboardButton('–ì–∏–¥—Ä–æ', callback_data='gidro')
        btn7 = types.InlineKeyboardButton('–≠–ª–µ–∫—Ç—Ä–æ', callback_data='electro')
        btn8 = types.InlineKeyboardButton('–ì–µ–æ', callback_data='heo')
        btn9 = types.InlineKeyboardButton('–î–µ–Ω–¥—Ä–æ', callback_data='dendro')
        btn10 = types.InlineKeyboardButton('–ê–Ω–µ–º–æ', callback_data='anemo')
        btn11 = types.InlineKeyboardButton('üîôback', callback_data='back')
        markup2.row(btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11)
        
        #bot.send_photo(call.message.chat.id)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∏—Ö–∏—é:', reply_markup=markup2)        

    #elif call.data == 'back':
        #bot.edit_message_text(call.message.text, call.message.chat.id, call.message.message_id, reply_markup=start(call.message))

    elif call.data == "bezdna":
        markup1 = types.InlineKeyboardMarkup()
        btn3 = types.InlineKeyboardButton('üîôback', callback_data='back')
        markup1.row(btn3)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        file = open('pic\–±–µ–∑–¥–Ω–∞.jpg', 'rb')
        bot.send_photo(call.message.chat.id, file)
        bot.send_message(call.message.chat.id, '–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ—Ä–º–∞—Ü–∏—è –ø–æ –±–µ–∑–¥–Ω–µ –≤–µ—Ä—Å–∏—è 5.2', reply_markup=markup1)        

    elif call.data == 'back':
        bot.edit_message_text(call.message.text, call.message.chat.id, call.message.message_id, reply_markup=start(call.message))







storage = dict()

def init_storage(user_id):
    storage[user_id] = dict(attempt=None, random_digit=None)

def set_data_storage(user_id, key, value):
    storage[user_id][key] = value

def get_data_storage(user_id):
    return storage[user_id]

bot.polling()







































'''  
@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == "bezdna":
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mar = types.neKeyboardButton("–ù–∞–∑–∞–¥")
        markup1.add(mar)
        file = open('pic\–±–µ–∑–¥–Ω–∞.jpg', 'rb')
        bot.send_photo(call.message.chat.id, file, '–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ—Ä–º–∞—Ü–∏—è –ø–æ –±–µ–∑–¥–Ω–µ –≤–µ—Ä—Å–∏—è 5.2')
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == "back":
        bot.edit_message_text(call.message.text, call.message.chat.id, call.message.message_id, reply_markup=start(call.message))
 '''



















'''
@bot.message_handler(func=lambda message: message.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
def command_text_hi(m):
    bot.send_message(m.chat.id, "–ù—É –ø—Ä–∏–≤–µ—Ç)")
    bot.send_message(m.chat.id, "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º?")
    bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏ –≤ –∫–∞–∫—É—é –∏–≥—Ä—É –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å (—á–∏—Å–ª–æ, –∫–Ω–±)")


@bot.message_handler(func=lambda message: message.text.lower() == "—á–∏—Å–ª–æ")
def digitgames(message):
    init_storage(message.chat.id) ### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

    attempt = 10
    set_data_storage(message.chat.id, "attempt", attempt)

    bot.send_message(message.chat.id, f'–ò–≥—Ä–∞ "—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ"!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {attempt}')

    random_digit=random.randint(1, 50)
    print(random_digit)

    set_data_storage(message.chat.id, "random_digit", random_digit)
    print(get_data_storage(message.chat.id))
 
    bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ! –ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50!')
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
    bot.register_next_step_handler(message, process_digit_step)

def process_digit_step(message):
    user_digit = message.text
    
    if not user_digit.isdigit():
            msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–∏—Ñ—Ä—ã')
            bot.register_next_step_handler(msg, process_digit_step)
            return

    attempt = get_data_storage(message.chat.id)["attempt"]
    random_digit = get_data_storage(message.chat.id)["random_digit"]

    if int(user_digit) == random_digit:
        bot.send_message(message.chat.id, f'–£—Ä–∞! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ! –≠—Ç–æ –±—ã–ª–∞ —Ü–∏—Ñ—Ä–∞: {random_digit}')
        init_storage(message.chat.id) ### –û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        return
    elif attempt > 1:
        attempt-=1
        set_data_storage(message.chat.id, "attempt", attempt)
        bot.send_message(message.chat.id, f'–ù–µ–≤–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempt}')
        bot.register_next_step_handler(message, process_digit_step)
    else:
        bot.send_message(message.chat.id, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
        init_storage(message.chat.id) ### –û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        return

@bot.message_handler(func=lambda message: message.text.lower() == "–∫–Ω–±")
def start(message):
    markup = types.ReplyKeyboardMarkup(row_width=3)
    markup.add(types.KeyboardButton('üóø'), types.KeyboardButton('‚úÇÔ∏è'), types.KeyboardButton('üìÑ'))
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'! –î–ª—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def digitgames(message):
    init_storage(message.chat.id) ### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_choice = message.text
    bot_choice = random.choice(['üóø', '‚úÇÔ∏è', 'üìÑ'])

    if user_choice not in ['üóø', '‚úÇÔ∏è', 'üìÑ']:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–º–Ω—è, –Ω–æ–∂–Ω–∏—Ü –∏–ª–∏ –±—É–º–∞–≥–∏.")
        return

    if user_choice == bot_choice:
        bot.reply_to(message, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_choice}, –∞ —è –≤—ã–±—Ä–∞–ª {bot_choice}. –ù–∏—á—å—è!")
    elif (user_choice == 'üóø' and bot_choice == '‚úÇÔ∏è') or (user_choice == '‚úÇÔ∏è' and bot_choice == 'üìÑ') or (user_choice == 'üìÑ' and bot_choice == 'üóø'):
        bot.reply_to(message, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_choice}, –∞ —è –≤—ã–±—Ä–∞–ª {bot_choice}. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
    else:
        bot.reply_to(message, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_choice}, –∞ —è –≤—ã–±—Ä–∞–ª {bot_choice}. –Ø –ø–æ–±–µ–¥–∏–ª! üòÑ")
'''























#@bot.message_handler(commands=['start'])
#def start(message):
#    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup = markup)

#@bot.message_handler(content_types=['text'])
#def get_text_messages(message):

#    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
#        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
#        btn1 = types.KeyboardButton('–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º?')
#        
#        markup.add(btn1)
#        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup = markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞


#    elif message.text == '–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º?':
#        bot.send_message(message.from_user.id, '–¥–∞–≤–∞–π', parse_mode='Markdown')